"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"movilesSidebar":[{"type":"category","label":"UT5 - Persistencia","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"5.1 Conceptos Fundamentales","href":"/docs/aplicaciones m\xf3viles/5 Persistencia/5.1 Conceptos Fundamentales","docId":"aplicaciones m\xf3viles/5 Persistencia/5.1 Conceptos Fundamentales","unlisted":false},{"type":"link","label":"5.2 SharedPreferences","href":"/docs/aplicaciones m\xf3viles/5 Persistencia/5.2 Shared Preferences","docId":"aplicaciones m\xf3viles/5 Persistencia/5.2 Shared Preferences","unlisted":false}],"href":"/docs/category/ut5---persistencia"}],"llmmSidebar":[{"type":"category","label":"UT3 - Java Script","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"3.1. Introducci\xf3n a JavaScript","href":"/docs/lenguajes de marca/3 Java Script/3.1 Introducci\xf3n a JavaScript","docId":"lenguajes de marca/3 Java Script/3.1 Introducci\xf3n a JavaScript","unlisted":false},{"type":"category","label":"3.2 Aspectos B\xe1sicos","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"3.2.1 M\xe9todos de Integraci\xf3n","href":"/docs/lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.1 Metodos de Integraci\xf3n","docId":"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.1 Metodos de Integraci\xf3n","unlisted":false},{"type":"link","label":"3.2.2 Funciones de consola","href":"/docs/lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.2 Funciones de Consola","docId":"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.2 Funciones de Consola","unlisted":false},{"type":"link","label":"3.2.3 Interacci\xf3n con el usuario","href":"/docs/lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.3 Interacci\xf3n con el Usuario","docId":"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.3 Interacci\xf3n con el Usuario","unlisted":false}],"href":"/docs/category/32-aspectos-b\xe1sicos"},{"type":"link","label":"3.3 Variables en JavaScript","href":"/docs/lenguajes de marca/3 Java Script/3.3 Declaraci\xf3n de Variables","docId":"lenguajes de marca/3 Java Script/3.3 Declaraci\xf3n de Variables","unlisted":false},{"type":"category","label":"3.4 Tipos de Datos y Operadores","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"3.4.1 Tipos de Datos en JavaScript","href":"/docs/lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.1 Tipos de Datos","docId":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.1 Tipos de Datos","unlisted":false},{"type":"link","label":"3.4.2 Operadores en JavaScript","href":"/docs/lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.2 Operadores","docId":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.2 Operadores","unlisted":false},{"type":"link","label":"3.4.3 Cadenas de Texto","href":"/docs/lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.3 Cadenas de Texto","docId":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.3 Cadenas de Texto","unlisted":false},{"type":"link","label":"3.4.4 Arrays","href":"/docs/lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.4 Arrays","docId":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.4 Arrays","unlisted":false}],"href":"/docs/category/34-tipos-de-datos-y-operadores"},{"type":"category","label":"3.5 Control de flujo","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"3.5.1 Estructuras Condicionales","href":"/docs/lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.1 Estructuras condicionales","docId":"lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.1 Estructuras condicionales","unlisted":false},{"type":"link","label":"3.5.2 Bucles e Iteraciones","href":"/docs/lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.2 Bucles e iteraciones","docId":"lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.2 Bucles e iteraciones","unlisted":false}],"href":"/docs/category/35-control-de-flujo"},{"type":"link","label":"3.6 Funciones en JavaScript","href":"/docs/lenguajes de marca/3 Java Script/3.6 Funciones","docId":"lenguajes de marca/3 Java Script/3.6 Funciones","unlisted":false}],"href":"/docs/category/ut3---java-script"}]},"docs":{"aplicaciones m\xf3viles/5 Persistencia/5.1 Conceptos Fundamentales":{"id":"aplicaciones m\xf3viles/5 Persistencia/5.1 Conceptos Fundamentales","title":"5.1 Conceptos Fundamentales","description":"\ud83d\udcf1 La persistencia de datos en Android: Clave para un rendimiento superior","sidebar":"movilesSidebar"},"aplicaciones m\xf3viles/5 Persistencia/5.2 Shared Preferences":{"id":"aplicaciones m\xf3viles/5 Persistencia/5.2 Shared Preferences","title":"5.2 SharedPreferences","description":"\ud83d\udee0\ufe0f SharedPreferences es una soluci\xf3n perfecta para almacenar datos simples en Android, como configuraciones o preferencias de usuario. Con un uso correcto y entendiendo sus limitaciones, puedes mejorar significativamente la experiencia del usuario en tu aplicaci\xf3n.","sidebar":"movilesSidebar"},"lenguajes de marca/3 Java Script/3.1 Introducci\xf3n a JavaScript":{"id":"lenguajes de marca/3 Java Script/3.1 Introducci\xf3n a JavaScript","title":"3.1. Introducci\xf3n a JavaScript","description":"\xbfQu\xe9 es JavaScript? \ud83c\udf10","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.1 Metodos de Integraci\xf3n":{"id":"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.1 Metodos de Integraci\xf3n","title":"3.2.1 M\xe9todos de Integraci\xf3n","description":"JavaScript necesita integrarse con HTML para poder ejecutarse en un navegador. \ud83c\udf10 Esto se logra a trav\xe9s de diversos m\xe9todos que permiten incluir c\xf3digo JavaScript en un archivo HTML. \ud83e\udde9 Es fundamental entender estas opciones, ya que afectan la estructura, legibilidad y mantenimiento del c\xf3digo. \u2705","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.2 Funciones de Consola":{"id":"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.2 Funciones de Consola","title":"3.2.2 Funciones de consola","description":"En JavaScript, el objeto console ofrece un conjunto de funciones que permiten interactuar con la consola del navegador. Estas herramientas son muy \xfatiles para depuraci\xf3n, registro de mensajes, advertencias y errores. Aqu\xed exploraremos las funciones m\xe1s comunes:","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.3 Interacci\xf3n con el Usuario":{"id":"lenguajes de marca/3 Java Script/3.2 Aspectos B\xe1sicos/3.2.3 Interacci\xf3n con el Usuario","title":"3.2.3 Interacci\xf3n con el usuario","description":"La API del DOM (Document Object Model) en JavaScript nos permite interactuar con los usuarios directamente a trav\xe9s de la ventana del navegador. Las funciones m\xe1s comunes para este prop\xf3sito son alert, prompt, confirm y document.write. A continuaci\xf3n, te explico c\xf3mo funcionan y cu\xe1ndo utilizarlas:","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.3 Declaraci\xf3n de Variables":{"id":"lenguajes de marca/3 Java Script/3.3 Declaraci\xf3n de Variables","title":"3.3 Variables en JavaScript","description":"En JavaScript, las variables son contenedores que almacenan valores. Pueden contener desde n\xfameros y cadenas de texto hasta objetos complejos. Declarar variables correctamente es fundamental para garantizar un c\xf3digo legible, eficiente y sin errores. \u2705","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.1 Tipos de Datos":{"id":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.1 Tipos de Datos","title":"3.4.1 Tipos de Datos en JavaScript","description":"En JavaScript, los tipos de datos representan las diversas formas en las que se pueden almacenar y manipular valores. Estos tipos se dividen en primitivos y complejos. \u2728 Entender c\xf3mo funcionan y se comportan es fundamental para escribir c\xf3digo eficiente y libre de errores. \ud83d\ude80","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.2 Operadores":{"id":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.2 Operadores","title":"3.4.2 Operadores en JavaScript","description":"Los operadores son fundamentales en cualquier lenguaje de programaci\xf3n \ud83e\uddee, ya que permiten realizar c\xe1lculos, comparaciones, combinaciones l\xf3gicas y otras operaciones sobre los datos. En JavaScript, los operadores est\xe1n organizados en varias categor\xedas seg\xfan su funcionalidad. \ud83d\ude80","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.3 Cadenas de Texto":{"id":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.3 Cadenas de Texto","title":"3.4.3 Cadenas de Texto","description":"Las cadenas de texto (strings) en JavaScript son uno de los tipos de datos m\xe1s utilizados. Representan secuencias de caracteres y se pueden usar para almacenar y manipular texto. En este manual, exploraremos las operaciones m\xe1s comunes, m\xe9todos \xfatiles y buenas pr\xe1cticas para trabajar con cadenas de texto. \u2728","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.4 Arrays":{"id":"lenguajes de marca/3 Java Script/3.4 Tipos de Datos/3.4.4 Arrays","title":"3.4.4 Arrays","description":"Los arrays en JavaScript son \ud83d\uddc3\ufe0f estructuras de datos que permiten almacenar m\xfaltiples valores en una sola variable. Son din\xe1micos \u2728, lo que significa que pueden crecer o decrecer seg\xfan sea necesario, y pueden contener cualquier tipo de dato (n\xfameros \ud83d\udd22, cadenas \ud83d\udcdd, objetos \ud83d\udee0\ufe0f, funciones \u27a1\ufe0f, otros arrays \ud83d\udd04, etc.).","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.1 Estructuras condicionales":{"id":"lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.1 Estructuras condicionales","title":"3.5.1 Estructuras Condicionales","description":"Las condicionales permiten que un programa tome decisiones basadas en condiciones espec\xedficas. En esta secci\xf3n, desarrollaremos las estructuras condicionales m\xe1s comunes en JavaScript: if...else \ud83e\udd14\u27a1\ufe0f, switch \ud83d\udd04 y el operador ternario \u2753\u27a1\ufe0f\u2714\ufe0f, complementando la explicaci\xf3n con diagramas Mermaid \ud83d\uddbc\ufe0f para facilitar la comprensi\xf3n.","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.2 Bucles e iteraciones":{"id":"lenguajes de marca/3 Java Script/3.5 Control de Flujo/3.5.2 Bucles e iteraciones","title":"3.5.2 Bucles e Iteraciones","description":"Los bucles son estructuras fundamentales en programaci\xf3n, ya que permiten ejecutar un bloque de c\xf3digo varias veces, dependiendo de una condici\xf3n o un conjunto de valores. En JavaScript, los bucles incluyen: for, while, do...while, for...in y for...of. \ud83d\ude80","sidebar":"llmmSidebar"},"lenguajes de marca/3 Java Script/3.6 Funciones":{"id":"lenguajes de marca/3 Java Script/3.6 Funciones","title":"3.6 Funciones en JavaScript","description":"Las funciones son bloques de c\xf3digo reutilizables que se pueden ejecutar en cualquier momento. En JavaScript, las funciones son un concepto central, ya que permiten estructurar \ud83c\udfd7\ufe0f, modularizar \ud83e\udde9 y reutilizar \u267b\ufe0f el c\xf3digo, facilitando la legibilidad \ud83d\udc53 y el mantenimiento \ud83d\udd27 de las aplicaciones.","sidebar":"llmmSidebar"}}}}')}}]);