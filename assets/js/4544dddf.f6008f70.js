"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[1892],{2305:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"aplicaciones m\xf3viles/5 Persistencia/Room/5.3.1 Introducci\xf3n a Room","title":"5.3.1 Introducci\xf3n a Room","description":"\u2728  Android Room es una biblioteca de persistencia que forma parte de Android Jetpack. Su objetivo principal es proporcionar una capa de abstracci\xf3n sobre SQLite para facilitar el manejo de bases de datos en aplicaciones Android. Con Room, puedes interactuar con SQLite utilizando objetos y anotaciones, eliminando gran parte del c\xf3digo repetitivo y propenso a errores necesario para gestionar bases de datos de forma tradicional. \ud83d\ude80","source":"@site/docs/aplicaciones m\xf3viles/5 Persistencia/Room/5.3.1 Introducci\xf3n a Room.md","sourceDirName":"aplicaciones m\xf3viles/5 Persistencia/Room","slug":"/aplicaciones m\xf3viles/5 Persistencia/Room/5.3.1 Introducci\xf3n a Room","permalink":"/docs/aplicaciones m\xf3viles/5 Persistencia/Room/5.3.1 Introducci\xf3n a Room","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"movilesSidebar","previous":{"title":"5.3 Room","permalink":"/docs/category/53-room"},"next":{"title":"5.3.2 Configuraci\xf3n de Dependencias","permalink":"/docs/aplicaciones m\xf3viles/5 Persistencia/Room/5.3.2 Configuraci\xf3n de Dependencias"}}');var o=n(4848),i=n(8453);const r={sidebar_position:1},t=void 0,d={},c=[{value:"<strong>\ud83e\udd14 \xbfQu\xe9 es Android Room?</strong>",id:"-qu\xe9-es-android-room",level:3},{value:"<strong>\ud83d\udca1 Ventajas de usar Room</strong>",id:"-ventajas-de-usar-room",level:3},{value:"<strong>\ud83d\udd11 Componentes principales de Room</strong>",id:"-componentes-principales-de-room",level:3},{value:"<strong>\u2696\ufe0f Comparaci\xf3n entre SQLite y Room</strong>",id:"\ufe0f-comparaci\xf3n-entre-sqlite-y-room",level:3}];function l(e){const s={br:"br",code:"code",h3:"h3",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.p,{children:["\u2728  ",(0,o.jsx)(s.strong,{children:"Android Room"})," es una biblioteca de persistencia que forma parte de Android Jetpack. Su objetivo principal es proporcionar una capa de abstracci\xf3n sobre SQLite para facilitar el manejo de bases de datos en aplicaciones Android. Con Room, puedes interactuar con SQLite utilizando objetos y anotaciones, eliminando gran parte del c\xf3digo repetitivo y propenso a errores necesario para gestionar bases de datos de forma tradicional. \ud83d\ude80"]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"-qu\xe9-es-android-room",children:(0,o.jsx)(s.strong,{children:"\ud83e\udd14 \xbfQu\xe9 es Android Room?"})}),"\n",(0,o.jsxs)(s.p,{children:["Room es una poderosa ",(0,o.jsx)(s.strong,{children:"ORM (Object Relational Mapping)"})," que te permite trabajar con bases de datos SQLite de forma intuitiva. Con ",(0,o.jsx)(s.strong,{children:"entidades"})," y ",(0,o.jsx)(s.strong,{children:"DAOs"}),", Room convierte clases de Kotlin o Java en registros de base de datos y viceversa, gracias a su enfoque basado en anotaciones.",(0,o.jsx)(s.br,{}),"\n","Room convierte autom\xe1ticamente los objetos de datos (como clases Java) en registros de base de datos y viceversa, utilizando un enfoque basado en anotaciones."]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"-ventajas-de-usar-room",children:(0,o.jsx)(s.strong,{children:"\ud83d\udca1 Ventajas de usar Room"})}),"\n",(0,o.jsxs)(s.p,{children:["\u2705 ",(0,o.jsx)(s.strong,{children:"Manejo simplificado"}),": Room elimina la necesidad de escribir consultas SQL complejas manualmente al mapear las operaciones directamente a m\xe9todos en los DAOs."]}),"\n",(0,o.jsxs)(s.p,{children:["\u2705 ",(0,o.jsx)(s.strong,{children:"Errores detectados antes de tiempo"}),": Room valida las consultas SQL y las estructuras de base de datos durante la compilaci\xf3n, reduciendo los errores en tiempo de ejecuci\xf3n.\ud83d\udee1\ufe0f"]}),"\n",(0,o.jsxs)(s.p,{children:["\u2705 ",(0,o.jsx)(s.strong,{children:"Integraci\xf3n moderna"}),": Perfecto para ",(0,o.jsx)(s.strong,{children:"LiveData"}),", ",(0,o.jsx)(s.strong,{children:"Coroutines"})," y ",(0,o.jsx)(s.strong,{children:"Flow"}),", ideal para MVVM y Clean Architecture."]}),"\n",(0,o.jsxs)(s.p,{children:["\u2705 ",(0,o.jsx)(s.strong,{children:"Migraciones f\xe1ciles"}),": Room facilita la actualizaci\xf3n del esquema de la base de datos cuando cambian las necesidades de la aplicaci\xf3n, gracias a su sistema de migraci\xf3n. \ud83d\udd04"]}),"\n",(0,o.jsxs)(s.p,{children:["\u2705 ",(0,o.jsx)(s.strong,{children:"Mejora de rendimiento"}),": Room permite definir \xedndices, claves primarias y relaciones entre tablas, lo que mejora el rendimiento de las consultas."]}),"\n",(0,o.jsxs)(s.p,{children:["\u2705 ",(0,o.jsx)(s.strong,{children:"Interoperabilidad"}),": Room permite ejecutar consultas SQL personalizadas cuando se necesita control total. \ud83d\udd27"]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"-componentes-principales-de-room",children:(0,o.jsx)(s.strong,{children:"\ud83d\udd11 Componentes principales de Room"})}),"\n",(0,o.jsx)(s.mermaid,{value:"graph TD;\r\n    Entidades[\ud83d\uddc2\ufe0f Entidades] --\x3e|Representan tablas| BaseDeDatos[\ud83c\udf9b\ufe0f Base de Datos];\r\n    Entidades --\x3e|Definidas con @Entity| Clases[\ud83d\udcc4 Clases Java];\r\n    DAOs[\ud83d\udee0\ufe0f DAOs] --\x3e|Interacci\xf3n con datos| BaseDeDatos;\r\n    DAOs --\x3e|Definidas con @Query, @Insert, @Update| Metodos[\u2699\ufe0f M\xe9todos personalizados];\r\n    BaseDeDatos --\x3e|Conexi\xf3n| SQLite[\ud83d\udcbe SQLite];\r\n"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Entidades"}),": \ud83d\uddc2\ufe0f Las entidades son clases que representan las tablas de la base de datos. Se anotan con ",(0,o.jsx)(s.code,{children:"@Entity"})," y definen las columnas mediante sus campos."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"DAOs"}),": \ud83d\udee0\ufe0f Los DAOs son interfaces o clases abstractas que definen m\xe9todos para interactuar con las tablas de la base de datos mediante anotaciones como (",(0,o.jsx)(s.code,{children:"@Query"}),", ",(0,o.jsx)(s.code,{children:"@Insert"}),", ",(0,o.jsx)(s.code,{children:"@Update"}),", ",(0,o.jsx)(s.code,{children:"@Delete"}),"). Contiene los m\xe9todos con las consultas para acceder a la base de datos."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Base de datos"}),": \ud83c\udf9b\ufe0f La base de datos es la clase que extiende ",(0,o.jsx)(s.code,{children:"RoomDatabase"})," y act\xfaa como punto de entrada para Room. Es responsable de gestionar las conexiones con SQLite y proporcionar instancias de DAOs. Contiene la referencia a la base de datos."]}),"\n"]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"\ufe0f-comparaci\xf3n-entre-sqlite-y-room",children:(0,o.jsx)(s.strong,{children:"\u2696\ufe0f Comparaci\xf3n entre SQLite y Room"})}),"\n",(0,o.jsxs)(s.table,{children:[(0,o.jsx)(s.thead,{children:(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.th,{children:"Caracter\xedstica"}),(0,o.jsx)(s.th,{children:"SQLite"}),(0,o.jsx)(s.th,{children:"Room"})]})}),(0,o.jsxs)(s.tbody,{children:[(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:"Manejo de consultas"}),(0,o.jsx)(s.td,{children:"SQL manual"}),(0,o.jsxs)(s.td,{children:["M\xe9todos anotados (",(0,o.jsx)(s.code,{children:"@Query"}),")"]})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:"Validaci\xf3n en tiempo de compilaci\xf3n"}),(0,o.jsx)(s.td,{children:"\u274c No"}),(0,o.jsx)(s.td,{children:"\u2705 S\xed"})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:"Esfuerzo de codificaci\xf3n"}),(0,o.jsx)(s.td,{children:"Alto (propenso a errores)"}),(0,o.jsx)(s.td,{children:"Bajo (simplificado)"})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:"Observaci\xf3n de datos"}),(0,o.jsx)(s.td,{children:"\u274c No"}),(0,o.jsx)(s.td,{children:"\u2705 S\xed (con LiveData y Flow)"})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:"Migraciones"}),(0,o.jsx)(s.td,{children:"Manual"}),(0,o.jsx)(s.td,{children:"Automatizadas"})]})]})]})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>t});var a=n(6540);const o={},i=a.createContext(o);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);